<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_mirror_1_1_transport" kind="class" language="C#" prot="public" abstract="yes">
    <compoundname>Mirror::Transport</compoundname>
    <basecompoundref prot="public" virt="non-virtual">MonoBehaviour</basecompoundref>
    <derivedcompoundref refid="class_mirror_1_1_fallback_transport" prot="public" virt="non-virtual">Mirror.FallbackTransport</derivedcompoundref>
    <derivedcompoundref refid="class_mirror_1_1_l_l_a_p_i_transport" prot="public" virt="non-virtual">Mirror.LLAPITransport</derivedcompoundref>
    <derivedcompoundref refid="class_mirror_1_1_multiplex_transport" prot="public" virt="non-virtual">Mirror.MultiplexTransport</derivedcompoundref>
    <derivedcompoundref refid="class_mirror_1_1_telepathy_transport" prot="public" virt="non-virtual">Mirror.TelepathyTransport</derivedcompoundref>
    <derivedcompoundref refid="class_mirror_1_1_websocket_1_1_websocket_transport" prot="public" virt="non-virtual">Mirror.Websocket.WebsocketTransport</derivedcompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a4e187471cf106ef6068e4347b1d2fdee" prot="public" static="yes" mutable="no">
        <type><ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref></type>
        <definition>Transport Mirror.Transport.activeTransport</definition>
        <argsstring></argsstring>
        <name>activeTransport</name>
        <briefdescription>
<para>The current transport used by <ref refid="namespace_mirror" kindref="compound">Mirror</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="22" column="33" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_transport_1acafeb3fc7051eb2456961a4aab66bd67" prot="public" static="no" mutable="no">
        <type>UnityEvent</type>
        <definition>UnityEvent Mirror.Transport.OnClientConnected</definition>
        <argsstring></argsstring>
        <name>OnClientConnected</name>
        <initializer>= new UnityEvent()</initializer>
        <briefdescription>
<para>Notify subscribers when when this client establish a successful connection to the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="37" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a73f5e6da15756d7bf2bcfd12429be058" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_client_data_received_event" kindref="compound">ClientDataReceivedEvent</ref></type>
        <definition>ClientDataReceivedEvent Mirror.Transport.OnClientDataReceived</definition>
        <argsstring></argsstring>
        <name>OnClientDataReceived</name>
        <initializer>= new <ref refid="class_mirror_1_1_client_data_received_event" kindref="compound">ClientDataReceivedEvent</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when this client receive data from the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="42" column="41" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a288982823f99bfd439277ee2a174173b" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_unity_event_exception" kindref="compound">UnityEventException</ref></type>
        <definition>UnityEventException Mirror.Transport.OnClientError</definition>
        <argsstring></argsstring>
        <name>OnClientError</name>
        <initializer>= new <ref refid="class_mirror_1_1_unity_event_exception" kindref="compound">UnityEventException</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when this clianet encounters an error communicating with the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="47" column="37" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a32abf6e68728cdb49cd31a9208a7eb55" prot="public" static="no" mutable="no">
        <type>UnityEvent</type>
        <definition>UnityEvent Mirror.Transport.OnClientDisconnected</definition>
        <argsstring></argsstring>
        <name>OnClientDisconnected</name>
        <initializer>= new UnityEvent()</initializer>
        <briefdescription>
<para>Notify subscribers when this client disconnects from the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="52" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a4e8ff19ebeb434fec9b7262fa1b9638c" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_unity_event_int" kindref="compound">UnityEventInt</ref></type>
        <definition>UnityEventInt Mirror.Transport.OnServerConnected</definition>
        <argsstring></argsstring>
        <name>OnServerConnected</name>
        <initializer>= new <ref refid="class_mirror_1_1_unity_event_int" kindref="compound">UnityEventInt</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when a client connects to this server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="107" column="31" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1ac5d03436d77ffe03d3391629a1a85c16" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_server_data_received_event" kindref="compound">ServerDataReceivedEvent</ref></type>
        <definition>ServerDataReceivedEvent Mirror.Transport.OnServerDataReceived</definition>
        <argsstring></argsstring>
        <name>OnServerDataReceived</name>
        <initializer>= new <ref refid="class_mirror_1_1_server_data_received_event" kindref="compound">ServerDataReceivedEvent</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when this server receives data from the client </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="112" column="41" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a656d1f29dc7a753a6c63e6c9cfdc73cc" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_unity_event_int_exception" kindref="compound">UnityEventIntException</ref></type>
        <definition>UnityEventIntException Mirror.Transport.OnServerError</definition>
        <argsstring></argsstring>
        <name>OnServerError</name>
        <initializer>= new <ref refid="class_mirror_1_1_unity_event_int_exception" kindref="compound">UnityEventIntException</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when this server has some problem communicating with the client </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="117" column="40" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_transport_1a14b8d3ba13b5f98924aeec45af184d45" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_unity_event_int" kindref="compound">UnityEventInt</ref></type>
        <definition>UnityEventInt Mirror.Transport.OnServerDisconnected</definition>
        <argsstring></argsstring>
        <name>OnServerDisconnected</name>
        <initializer>= new <ref refid="class_mirror_1_1_unity_event_int" kindref="compound">UnityEventInt</ref>()</initializer>
        <briefdescription>
<para>Notify subscribers when a client disconnects from this server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="122" column="31" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mirror_1_1_transport_1a7c662214f058b24b4dec5913d09122e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.Available</definition>
        <argsstring>()</argsstring>
        <name>Available</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a1daef2d72f0ef35677d2a2f26e187d56">Available</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a65fe94c1f3285c340868568295b7de49">Available</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1ad98c9bce475c4f3f60ff76b73daca3ba">Available</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1abcdb0e93b24235e9109c6846f1f1c1b6">Available</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1ab74bec853ab24e529b435538571a4d50">Available</reimplementedby>
        <briefdescription>
<para>Is this transport available in the current platform? </para>
        </briefdescription>
        <detaileddescription>
<para>Some transports might only be available in mobile</para>
<para>Many will not work in webgl</para>
<para>Example usage: return Application.platform == RuntimePlatform.WebGLPlayer</para>
<para><simplesect kind="return"><para>True if this transport works in the current platform</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="31" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a1d37768d58bce8ccfeafb254ff6961b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.ClientConnected</definition>
        <argsstring>()</argsstring>
        <name>ClientConnected</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a5211e0a68ae31e84bf7a4969b23e1dd5">ClientConnected</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1aa9356af7004bdd06ca6bb8dd2ebbc622">ClientConnected</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a641c5ae1ac013c3f4cd7bdd6590e8fa8">ClientConnected</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a5331c3cab8955c9307f84522ca91b125">ClientConnected</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a9b6a63616576de2c03cd7c4ca9d44dce">ClientConnected</reimplementedby>
        <briefdescription>
<para>Determines if we are currently connected to the server </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if a connection has been established to the server</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="58" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1aa8e301deea483e11bc3a77241bebd6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Mirror.Transport.ClientConnect</definition>
        <argsstring>(string address)</argsstring>
        <name>ClientConnect</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1aabcb7a9b999ac2daf796ca3c603aaa59">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a743ef9e759d75eabeaec5b3e453b28b4">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a2f4b96f51f862f798efc0b0f00e6125e">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1adadb28cf6672e015d58c5565f491ad71">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1abd6aec6986974768260010766a409aa5">ClientConnect</reimplementedby>
        <param>
          <type>string</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address or FQDN of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="64" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1ac5e84a6ef26c090e2075a513d5724cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Mirror.Transport.ClientConnect</definition>
        <argsstring>(Uri uri)</argsstring>
        <name>ClientConnect</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a1b7af306dc91a815bd79a1df1bee04c0">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1ad9e4feafe7543d6240359703ef7e4f93">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a80db4247bdcaec3058eba6307188040a">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a4a4122caf208b894ec69f04cbe3918a3">ClientConnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a6a3f275097cf34346a82f15857acb808">ClientConnect</reimplementedby>
        <param>
          <type>Uri</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="70" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a72f04bfce4b5cc2e6e706b069a8a4c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.ClientSend</definition>
        <argsstring>(int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ClientSend</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1af0264ad1e1e1ee76bf40bcb470a56f73">ClientSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a521393e2ef092d5d09b4c49687ba43ee">ClientSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1aeddfb34290f9679f0a7e0002166d5b4d">ClientSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a11f31cd59a918a59274507bec70f5e26">ClientSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a2944f67990c8f81b24afedacc25b92fc">ClientSend</reimplementedby>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to the server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends!</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the send was successful</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="85" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1adf81d49444738fb55ec8962535c5ed05" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Mirror.Transport.ClientDisconnect</definition>
        <argsstring>()</argsstring>
        <name>ClientDisconnect</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a3f1f6810917dfc142f5fa932135c269c">ClientDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a4aeda89fc227db785561ade459844bfe">ClientDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a9ed0db19440dcb216448bd4ef7750c7a">ClientDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a08c4ab88612c182eb7c3dd6678e33435">ClientDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a066dea137bd83477bdc1001beb7e7ce6">ClientDisconnect</reimplementedby>
        <briefdescription>
<para>Disconnect this client from the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="90" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a4c03319f92bc9bccd60666aa8640b914" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract Uri</type>
        <definition>abstract Uri Mirror.Transport.ServerUri</definition>
        <argsstring>()</argsstring>
        <name>ServerUri</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a128e27d87a56b4c6b5a55ebefe96f0b3">ServerUri</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a223839c3462561517f67969418f952fc">ServerUri</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1ab0a39ef76d62f2191e7de6e5f794617b">ServerUri</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1ac6e0eff4f1fd72746416a3fa76385009">ServerUri</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a97a2c68880e296d3c42b7fd72e75e113">ServerUri</reimplementedby>
        <briefdescription>
<para>Retrieves the address of this server. Useful for network discovery </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the url at which this server can be reached</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="102" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1aecd7291bd0108abab27e2188bc3204b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.ServerActive</definition>
        <argsstring>()</argsstring>
        <name>ServerActive</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1adf1f173fa3033451a16e09099b3e0fd7">ServerActive</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1afc60310fadd166c7195c070c5033e1dc">ServerActive</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a318b01792419938222063f19efc21121">ServerActive</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a97c1df1f38e023cb2a37c57b51987066">ServerActive</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a9e500951a83c3397f0d64cefc7aa7c9a">ServerActive</reimplementedby>
        <briefdescription>
<para>Determines if the server is up and running </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the transport is ready for connections from clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="128" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a104abe48a87936fbe5d31a289d83a36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Mirror.Transport.ServerStart</definition>
        <argsstring>()</argsstring>
        <name>ServerStart</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a387178ccbbfd744542ef4c665cb05602">ServerStart</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a421beefc75227b19ec0be0256616dc51">ServerStart</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a8e851be71a40954c5dd4a5aa09ca4952">ServerStart</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a5a944f452d2869443d8441c1e6dffa4e">ServerStart</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a39bbcbbedbc8521c4378e71791867c22">ServerStart</reimplementedby>
        <briefdescription>
<para>Start listening for clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="133" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a9b7725d91b696845add4defdce3c37ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.ServerSend</definition>
        <argsstring>(List&lt; int &gt; connectionIds, int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ServerSend</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a9becb241804d6544cc977f2066348fe0">ServerSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a94272da92a5577f6aadf8110fba39feb">ServerSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1afee049be1db47ed163f57371f1d68184">ServerSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1af7352db49c2558ba4d94306b68ee5691">ServerSend</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1ac7850eaf0e4d1a9cd52db7efa6797669">ServerSend</reimplementedby>
        <param>
          <type>List&lt; int &gt;</type>
          <declname>connectionIds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to one or multiple clients. We provide a list, so that transports can make use of multicasting, and avoid allocations where possible. </para>
        </briefdescription>
        <detaileddescription>
<para>We don&apos;t provide a single ServerSend function to reduce complexity. Simply overwrite this one in your <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionIds</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of client connection ids to send the data to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc...</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the data was sent to all clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="147" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a733852b2e5bc2922129700e1e3128d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Mirror.Transport.ServerDisconnect</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerDisconnect</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a5edd2631591699ff8fbb144405e00a2d">ServerDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a0ab6086afaa3f59acabea5556c305e80">ServerDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a98430e169e0950e985460ee0fc8d26e0">ServerDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a5e78c63b32917d798730d49a651e3da4">ServerDisconnect</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1af9085f6e48ef2d51425d47efa7e37e35">ServerDisconnect</reimplementedby>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Disconnect a client from this server. Useful to kick people out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the client to disconnect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the client was kicked</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="154" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a776ddfb60f41fa6645df0c74833c46f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract string</type>
        <definition>abstract string Mirror.Transport.ServerGetClientAddress</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerGetClientAddress</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a8b4b57854f8e36d901eb6b421a208918">ServerGetClientAddress</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a62205c31a7d1d25852eea57a34625853">ServerGetClientAddress</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1afdf2563f5add8134a4c0b6c8cad9b88b">ServerGetClientAddress</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1ad2a54c4fa5d6c327b2ce5ed9cf060a52">ServerGetClientAddress</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a802540d4ea725e6a9e8ba97b99bae482">ServerGetClientAddress</reimplementedby>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Get the client address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the client</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the client</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="161" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a6e99933a82108c0dcb358ce4e60a3acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Mirror.Transport.ServerStop</definition>
        <argsstring>()</argsstring>
        <name>ServerStop</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a3c1948b479a16f126b35ac34333d76e7">ServerStop</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a79824ce031aeee9c3376aa4fa6d2af65">ServerStop</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a75515f8154aafc86bfc820b06d85c66c">ServerStop</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a2c09721619ef9e9f0676dbe4bfb9a202">ServerStop</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a7e8a145c0c80a14173f8a08a25ced149">ServerStop</reimplementedby>
        <briefdescription>
<para>Stop listening for clients and disconnect all existing clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="166" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a6340d7bcfced9674d8c4f59b0d0746cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract int</type>
        <definition>abstract int Mirror.Transport.GetMaxPacketSize</definition>
        <argsstring>(int channelId=Channels.DefaultReliable)</argsstring>
        <name>GetMaxPacketSize</name>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a10d9d6fda39fe552976a3bc463253dc5">GetMaxPacketSize</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1aed16f9818435d5f26f0a796818a51c39">GetMaxPacketSize</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1afe783af2ecfcd7faca1583a969f78d49">GetMaxPacketSize</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1ae091227ae3e3cedc0e9fcd4319ae8bb4">GetMaxPacketSize</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1a66fce608e954d97cd2ef1768512e58c3">GetMaxPacketSize</reimplementedby>
        <param>
          <type>int</type>
          <declname>channelId</declname>
          <defval>Channels.DefaultReliable</defval>
        </param>
        <briefdescription>
<para>The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. </para>
        </briefdescription>
        <detaileddescription>
<para>GetMaxPacketSize needs to return a value at all times. Even if the <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref> isn&apos;t running, or isn&apos;t <ref refid="class_mirror_1_1_transport_1a7c662214f058b24b4dec5913d09122e1" kindref="member">Available()</ref>. This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size in bytes that can be sent via the provided channel</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="182" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a79346ab9427f1cf37ff8154856040449" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Mirror.Transport.Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <reimplementedby refid="class_mirror_1_1_fallback_transport_1a9dd3430d939e5e031dec2856ce14aa93">Shutdown</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_l_l_a_p_i_transport_1a867c89a2d478cf46bce158ed00d6812c">Shutdown</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_multiplex_transport_1afa69e1dd33ad5cfe47635ebbba868165">Shutdown</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_telepathy_transport_1a884bca48dacd2fe0f1a7bd2ae947bdf9">Shutdown</reimplementedby>
        <reimplementedby refid="class_mirror_1_1_websocket_1_1_websocket_transport_1a7cfa6744bc91c58d2775794e91e23b47">Shutdown</reimplementedby>
        <briefdescription>
<para>Shut down the transport, both as client and server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="187" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1ad1a6da8f541579f53d7a2c61cbc820c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.Transport.Update</definition>
        <argsstring>()</argsstring>
        <name>Update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="204" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_transport_1a60da8b19a9fcc0e4e5b732887ed750dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Mirror.Transport.OnApplicationQuit</definition>
        <argsstring>()</argsstring>
        <name>OnApplicationQuit</name>
        <briefdescription>
<para>called when quitting the application by closing the window / pressing stop in the editor </para>
        </briefdescription>
        <detaileddescription>
<para>virtual so that inheriting classes&apos; <ref refid="class_mirror_1_1_transport_1a60da8b19a9fcc0e4e5b732887ed750dd" kindref="member">OnApplicationQuit()</ref> can call base.OnApplicationQuit() too</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="211" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="211" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>Mirror.MultiplexTransport</label>
        <link refid="class_mirror_1_1_multiplex_transport"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Mirror.TelepathyTransport</label>
        <link refid="class_mirror_1_1_telepathy_transport"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Mirror.FallbackTransport</label>
        <link refid="class_mirror_1_1_fallback_transport"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Mirror.Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Mirror.Websocket.WebsocketTransport</label>
        <link refid="class_mirror_1_1_websocket_1_1_websocket_transport"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Mirror.LLAPITransport</label>
        <link refid="class_mirror_1_1_l_l_a_p_i_transport"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MonoBehaviour</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Mirror.UnityEventException</label>
        <link refid="class_mirror_1_1_unity_event_exception"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>UnityEvent&lt; Exception &gt;</label>
      </node>
      <node id="7">
        <label>Mirror.UnityEventIntException</label>
        <link refid="class_mirror_1_1_unity_event_int_exception"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>UnityEvent&lt; ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
      <node id="9">
        <label>Mirror.ClientDataReceivedEvent</label>
        <link refid="class_mirror_1_1_client_data_received_event"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Mirror.Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>OnServerConnected</edgelabel>
          <edgelabel>OnServerDisconnected</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>OnClientError</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>activeTransport</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>OnServerError</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>OnClientDataReceived</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>OnServerDataReceived</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Mirror.UnityEventInt</label>
        <link refid="class_mirror_1_1_unity_event_int"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>UnityEvent&lt; int, Exception &gt;</label>
      </node>
      <node id="2">
        <label>MonoBehaviour</label>
      </node>
      <node id="11">
        <label>Mirror.ServerDataReceivedEvent</label>
        <link refid="class_mirror_1_1_server_data_received_event"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>UnityEvent&lt; int &gt;</label>
      </node>
      <node id="12">
        <label>UnityEvent&lt; int, ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" line="17" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/Transport.cs" bodystart="18" bodyend="219"/>
    <listofallmembers>
      <member refid="class_mirror_1_1_transport_1a4e187471cf106ef6068e4347b1d2fdee" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>activeTransport</name></member>
      <member refid="class_mirror_1_1_transport_1a7c662214f058b24b4dec5913d09122e1" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>Available</name></member>
      <member refid="class_mirror_1_1_transport_1aa8e301deea483e11bc3a77241bebd6c8" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_transport_1ac5e84a6ef26c090e2075a513d5724cd4" prot="public" virt="virtual"><scope>Mirror::Transport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_transport_1a1d37768d58bce8ccfeafb254ff6961b5" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ClientConnected</name></member>
      <member refid="class_mirror_1_1_transport_1adf81d49444738fb55ec8962535c5ed05" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ClientDisconnect</name></member>
      <member refid="class_mirror_1_1_transport_1a72f04bfce4b5cc2e6e706b069a8a4c35" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ClientSend</name></member>
      <member refid="class_mirror_1_1_transport_1a6340d7bcfced9674d8c4f59b0d0746cf" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>GetMaxPacketSize</name></member>
      <member refid="class_mirror_1_1_transport_1a60da8b19a9fcc0e4e5b732887ed750dd" prot="public" virt="virtual"><scope>Mirror::Transport</scope><name>OnApplicationQuit</name></member>
      <member refid="class_mirror_1_1_transport_1acafeb3fc7051eb2456961a4aab66bd67" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnClientConnected</name></member>
      <member refid="class_mirror_1_1_transport_1a73f5e6da15756d7bf2bcfd12429be058" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnClientDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a32abf6e68728cdb49cd31a9208a7eb55" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnClientDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a288982823f99bfd439277ee2a174173b" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnClientError</name></member>
      <member refid="class_mirror_1_1_transport_1a4e8ff19ebeb434fec9b7262fa1b9638c" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnServerConnected</name></member>
      <member refid="class_mirror_1_1_transport_1ac5d03436d77ffe03d3391629a1a85c16" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnServerDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a14b8d3ba13b5f98924aeec45af184d45" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnServerDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a656d1f29dc7a753a6c63e6c9cfdc73cc" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>OnServerError</name></member>
      <member refid="class_mirror_1_1_transport_1aecd7291bd0108abab27e2188bc3204b0" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerActive</name></member>
      <member refid="class_mirror_1_1_transport_1a733852b2e5bc2922129700e1e3128d8b" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerDisconnect</name></member>
      <member refid="class_mirror_1_1_transport_1a776ddfb60f41fa6645df0c74833c46f6" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerGetClientAddress</name></member>
      <member refid="class_mirror_1_1_transport_1a9b7725d91b696845add4defdce3c37ab" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerSend</name></member>
      <member refid="class_mirror_1_1_transport_1a104abe48a87936fbe5d31a289d83a36d" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerStart</name></member>
      <member refid="class_mirror_1_1_transport_1a6e99933a82108c0dcb358ce4e60a3acb" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerStop</name></member>
      <member refid="class_mirror_1_1_transport_1a4c03319f92bc9bccd60666aa8640b914" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>ServerUri</name></member>
      <member refid="class_mirror_1_1_transport_1a79346ab9427f1cf37ff8154856040449" prot="public" virt="pure-virtual"><scope>Mirror::Transport</scope><name>Shutdown</name></member>
      <member refid="class_mirror_1_1_transport_1ad1a6da8f541579f53d7a2c61cbc820c6" prot="public" virt="non-virtual"><scope>Mirror::Transport</scope><name>Update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

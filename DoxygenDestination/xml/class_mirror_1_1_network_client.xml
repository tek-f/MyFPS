<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_mirror_1_1_network_client" kind="class" language="C#" prot="public">
    <compoundname>Mirror::NetworkClient</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1a2657fdb6f74be09ccf5edf11e561a49c" prot="private" static="yes" mutable="no">
        <type>readonly ILogger</type>
        <definition>readonly ILogger Mirror.NetworkClient.logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <initializer>= LogFactory.GetLogger(typeof(NetworkClient))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="23" column="33" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1afd54960b13aebf4b471c7bd1405f8ce3" prot="private" static="yes" mutable="no">
        <type>readonly Dictionary&lt; int, NetworkMessageDelegate &gt;</type>
        <definition>readonly Dictionary&lt;int, NetworkMessageDelegate&gt; Mirror.NetworkClient.handlers</definition>
        <argsstring></argsstring>
        <name>handlers</name>
        <initializer>= new Dictionary&lt;int, NetworkMessageDelegate&gt;()</initializer>
        <briefdescription>
<para>The registered network message handlers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="28" column="36" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_mirror_1_1_network_client_1ae97e63a0760c2c863b668b9c7ea817a3" prot="public" static="yes" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref></type>
        <definition>NetworkConnection Mirror.NetworkClient.connection</definition>
        <argsstring></argsstring>
        <name>connection</name>
        <briefdescription>
<para>The <ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref> object this client is using. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="33" column="41" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="33" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1a642d31a6a693846f48667768a51c9ed8" prot="package" static="yes" mutable="no">
        <type>ConnectState</type>
        <definition>ConnectState Mirror.NetworkClient.connectState</definition>
        <argsstring></argsstring>
        <name>connectState</name>
        <initializer>= ConnectState.None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="35" column="38" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1ae2935590d4473587755c6e6635b748a5" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string Mirror.NetworkClient.serverIp</definition>
        <argsstring></argsstring>
        <name>serverIp</name>
        <initializer>=&gt; connection.address</initializer>
        <briefdescription>
<para>The IP address of the server that this client is connected to. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be empty if the client has not connected yet.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="41" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1a05d05f394615bce9d94c75f9d09b7d5e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Mirror.NetworkClient.active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <initializer>=&gt; connectState == ConnectState.Connecting || connectState == ConnectState.Connected</initializer>
        <briefdescription>
<para>active is true while a client is connecting/connected (= while the network is active) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="47" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1adab7a83217df273633302f550ad4517d" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Mirror.NetworkClient.isConnected</definition>
        <argsstring></argsstring>
        <name>isConnected</name>
        <initializer>=&gt; connectState == ConnectState.Connected</initializer>
        <briefdescription>
<para>This gives the current connection status of the client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="52" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_network_client_1aa29ffea32a3cdae2f709dc550a15554a" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Mirror.NetworkClient.isLocalClient</definition>
        <argsstring></argsstring>
        <name>isLocalClient</name>
        <initializer>=&gt; connection is ULocalConnectionToServer</initializer>
        <briefdescription>
<para>NetworkClient can connect to local server in host mode too </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="57" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a2ed7bfd11d7a00a25c8ede14a80efd03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.Connect</definition>
        <argsstring>(string address)</argsstring>
        <name>Connect</name>
        <param>
          <type>string</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Connect client to a NetworkServer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="63" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a7d66fd2226830f2497ef9e1dd6e97c9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.Connect</definition>
        <argsstring>(Uri uri)</argsstring>
        <name>Connect</name>
        <param>
          <type>Uri</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Connect client to a NetworkServer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the server to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="84" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="84" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1ab873b0463b44cf61fbc9981c7cd5b928" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.ConnectHost</definition>
        <argsstring>()</argsstring>
        <name>ConnectHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="101" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="101" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a311963a6fbd459b8b2e41939143e0bf1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.ConnectLocalServer</definition>
        <argsstring>()</argsstring>
        <name>ConnectLocalServer</name>
        <briefdescription>
<para>connect host mode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="125" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a3bda5c7fc3eb9b57833f7cd433f82377" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.DisconnectLocalServer</definition>
        <argsstring>()</argsstring>
        <name>DisconnectLocalServer</name>
        <briefdescription>
<para>disconnect host mode. this is needed to call <ref refid="struct_mirror_1_1_disconnect_message" kindref="compound">DisconnectMessage</ref> for the host client too. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="135" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="135" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1aacb97f107e23c4868bc19c29d0de76b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.Disconnect</definition>
        <argsstring>()</argsstring>
        <name>Disconnect</name>
        <briefdescription>
<para>Disconnect from server. </para>
        </briefdescription>
        <detaileddescription>
<para>The disconnect message will be invoked.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="199" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="199" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1aa1290ac9ab621651491d02d9b338c678" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.NetworkClient.Send&lt; T &gt;</definition>
        <argsstring>(T message, int channelId=Channels.DefaultReliable)</argsstring>
        <name>Send&lt; T &gt;</name>
        <param>
          <type>T</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channelId</declname>
          <defval>Channels.DefaultReliable</defval>
        </param>
        <briefdescription>
<para>This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The message must be an instance of a class derived from <ref refid="class_mirror_1_1_message_base" kindref="compound">MessageBase</ref>.</para>
<para>The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unregister.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if message was sent.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="243" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="243" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1af6bbbc8f30d168e87f0df599b344542f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.Update</definition>
        <argsstring>()</argsstring>
        <name>Update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="258" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="258" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a09ce474b1adb35e349f3ed592430d4f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.RegisterHandler&lt; T &gt;</definition>
        <argsstring>(Action&lt; NetworkConnection, T &gt; handler, bool requireAuthentication=true)</argsstring>
        <name>RegisterHandler&lt; T &gt;</name>
        <param>
          <type>Action&lt; <ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref>, T &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requireAuthentication</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Register a handler for a particular message type. </para>
        </briefdescription>
        <detaileddescription>
<para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Message type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handler which will be invoked when this message type is received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requireAuthentication</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the message requires an authenticated connection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="314" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="314" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1ac846834e8da42f87d3b8e3d6463b7b3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.RegisterHandler&lt; T &gt;</definition>
        <argsstring>(Action&lt; T &gt; handler, bool requireAuthentication=true)</argsstring>
        <name>RegisterHandler&lt; T &gt;</name>
        <param>
          <type>Action&lt; T &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requireAuthentication</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Register a handler for a particular message type. </para>
        </briefdescription>
        <detaileddescription>
<para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Message type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handler which will be invoked when this message type is received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requireAuthentication</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the message requires an authenticated connection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="331" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a8d7dfc9a90daf1f708c8a90b2b0625db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.ReplaceHandler&lt; T &gt;</definition>
        <argsstring>(Action&lt; NetworkConnection, T &gt; handler, bool requireAuthentication=true)</argsstring>
        <name>ReplaceHandler&lt; T &gt;</name>
        <param>
          <type>Action&lt; <ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref>, T &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requireAuthentication</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replaces a handler for a particular message type. </para>
        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="" kindref="compound">RegisterHandler(T)(Action(NetworkConnection, T), bool)</ref></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Message type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handler which will be invoked when this message type is received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requireAuthentication</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the message requires an authenticated connection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="343" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="343" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1afd567119b18ec93dbbf1628881fd2cee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.ReplaceHandler&lt; T &gt;</definition>
        <argsstring>(Action&lt; T &gt; handler, bool requireAuthentication=true)</argsstring>
        <name>ReplaceHandler&lt; T &gt;</name>
        <param>
          <type>Action&lt; T &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requireAuthentication</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Replaces a handler for a particular message type. </para>
        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="" kindref="compound">RegisterHandler(T)(Action(NetworkConnection, T), bool)</ref></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Message type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handler which will be invoked when this message type is received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requireAuthentication</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the message requires an authenticated connection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="356" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1ad9bf1944ef9532829c204511f42a8e46" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.NetworkClient.UnregisterHandler&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>UnregisterHandler&lt; T &gt;</name>
        <briefdescription>
<para>Unregisters a network message handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unregister.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="365" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a91074f65766bceac59f758ab004e3476" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <briefdescription>
<para>Shut down a client. </para>
        </briefdescription>
        <detaileddescription>
<para>This should be done when a client is no longer going to be used.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="376" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="376" bodyend="387"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_mirror_1_1_network_client_1abae60fd0bb93948c1403d886fc3b8833" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.InitializeTransportHandlers</definition>
        <argsstring>()</argsstring>
        <name>InitializeTransportHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="148" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a2eb3a05e2524017e56fc73d2a17199f3" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.OnError</definition>
        <argsstring>(Exception exception)</argsstring>
        <name>OnError</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="156" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a8e78afdc186f5b3e5714d1dc193e2d7a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.OnDisconnected</definition>
        <argsstring>()</argsstring>
        <name>OnDisconnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="161" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1aedb9c9b9c405749f62b351171c4cc1c6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.OnConnected</definition>
        <argsstring>()</argsstring>
        <name>OnConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="179" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="179" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a380156c86c3c2043cde0b97caf2c3a90" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.RemoveTransportHandlers</definition>
        <argsstring>()</argsstring>
        <name>RemoveTransportHandlers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="225" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="225" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-func">
      <memberdef kind="function" id="class_mirror_1_1_network_client_1a6d80bdf993bee9b650d520c692a1eb63" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.OnDataReceived</definition>
        <argsstring>(ArraySegment&lt; byte &gt; data, int channelId)</argsstring>
        <name>OnDataReceived</name>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="170" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="170" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_network_client_1ae23ce357a3548e999a755f48341e8134" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.NetworkClient.RegisterSystemHandlers</definition>
        <argsstring>(bool hostMode)</argsstring>
        <name>RegisterSystemHandlers</name>
        <param>
          <type>bool</type>
          <declname>hostMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="276" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="276" bodyend="305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a network client class used by the networking system. It contains a <ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref> that is used to connect to a network server. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="" kindref="compound">NetworkClient</ref> handle connection state, messages handlers, and connection configuration. There can be many <ref refid="" kindref="compound">NetworkClient</ref> instances in a process at a time, but only one that is connected to a game server (<ref refid="" kindref="compound">NetworkServer</ref>) that uses spawned objects.</para>
<para><ref refid="" kindref="compound">NetworkClient</ref> has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server.</para>
<para>The <ref refid="" kindref="compound">NetworkManager</ref> has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself.</para>
    </detaileddescription>
    <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" line="21" column="19" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/NetworkClient.cs" bodystart="22" bodyend="388"/>
    <listofallmembers>
      <member refid="class_mirror_1_1_network_client_1a05d05f394615bce9d94c75f9d09b7d5e" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>active</name></member>
      <member refid="class_mirror_1_1_network_client_1a2ed7bfd11d7a00a25c8ede14a80efd03" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Connect</name></member>
      <member refid="class_mirror_1_1_network_client_1a7d66fd2226830f2497ef9e1dd6e97c9e" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Connect</name></member>
      <member refid="class_mirror_1_1_network_client_1ab873b0463b44cf61fbc9981c7cd5b928" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>ConnectHost</name></member>
      <member refid="class_mirror_1_1_network_client_1ae97e63a0760c2c863b668b9c7ea817a3" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>connection</name></member>
      <member refid="class_mirror_1_1_network_client_1a311963a6fbd459b8b2e41939143e0bf1" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>ConnectLocalServer</name></member>
      <member refid="class_mirror_1_1_network_client_1a642d31a6a693846f48667768a51c9ed8" prot="package" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>connectState</name></member>
      <member refid="class_mirror_1_1_network_client_1aacb97f107e23c4868bc19c29d0de76b4" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Disconnect</name></member>
      <member refid="class_mirror_1_1_network_client_1a3bda5c7fc3eb9b57833f7cd433f82377" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>DisconnectLocalServer</name></member>
      <member refid="class_mirror_1_1_network_client_1afd54960b13aebf4b471c7bd1405f8ce3" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>handlers</name></member>
      <member refid="class_mirror_1_1_network_client_1abae60fd0bb93948c1403d886fc3b8833" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>InitializeTransportHandlers</name></member>
      <member refid="class_mirror_1_1_network_client_1adab7a83217df273633302f550ad4517d" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>isConnected</name></member>
      <member refid="class_mirror_1_1_network_client_1aa29ffea32a3cdae2f709dc550a15554a" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>isLocalClient</name></member>
      <member refid="class_mirror_1_1_network_client_1a2657fdb6f74be09ccf5edf11e561a49c" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>logger</name></member>
      <member refid="class_mirror_1_1_network_client_1aedb9c9b9c405749f62b351171c4cc1c6" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>OnConnected</name></member>
      <member refid="class_mirror_1_1_network_client_1a6d80bdf993bee9b650d520c692a1eb63" prot="package" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>OnDataReceived</name></member>
      <member refid="class_mirror_1_1_network_client_1a8e78afdc186f5b3e5714d1dc193e2d7a" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>OnDisconnected</name></member>
      <member refid="class_mirror_1_1_network_client_1a2eb3a05e2524017e56fc73d2a17199f3" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>OnError</name></member>
      <member refid="class_mirror_1_1_network_client_1a09ce474b1adb35e349f3ed592430d4f0" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>RegisterHandler&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1ac846834e8da42f87d3b8e3d6463b7b3f" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>RegisterHandler&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1ae23ce357a3548e999a755f48341e8134" prot="package" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>RegisterSystemHandlers</name></member>
      <member refid="class_mirror_1_1_network_client_1a380156c86c3c2043cde0b97caf2c3a90" prot="private" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>RemoveTransportHandlers</name></member>
      <member refid="class_mirror_1_1_network_client_1a8d7dfc9a90daf1f708c8a90b2b0625db" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>ReplaceHandler&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1afd567119b18ec93dbbf1628881fd2cee" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>ReplaceHandler&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1aa1290ac9ab621651491d02d9b338c678" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Send&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1ae2935590d4473587755c6e6635b748a5" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>serverIp</name></member>
      <member refid="class_mirror_1_1_network_client_1a91074f65766bceac59f758ab004e3476" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Shutdown</name></member>
      <member refid="class_mirror_1_1_network_client_1ad9bf1944ef9532829c204511f42a8e46" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>UnregisterHandler&lt; T &gt;</name></member>
      <member refid="class_mirror_1_1_network_client_1af6bbbc8f30d168e87f0df599b344542f" prot="public" virt="non-virtual"><scope>Mirror::NetworkClient</scope><name>Update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

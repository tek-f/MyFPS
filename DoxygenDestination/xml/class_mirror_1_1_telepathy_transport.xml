<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_mirror_1_1_telepathy_transport" kind="class" language="C#" prot="public">
    <compoundname>Mirror::TelepathyTransport</compoundname>
    <basecompoundref refid="class_mirror_1_1_transport" prot="public" virt="non-virtual">Mirror.Transport</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a4c3b0b7f38c960b7fd43dfd585b48bc9" prot="public" static="yes" mutable="no">
        <type>const string</type>
        <definition>const string Mirror.TelepathyTransport.Scheme</definition>
        <argsstring></argsstring>
        <name>Scheme</name>
        <initializer>= &quot;tcp4&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="17" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a70a9a54307fed1bb56df72002b361e19" prot="public" static="no" mutable="no">
        <type>ushort</type>
        <definition>ushort Mirror.TelepathyTransport.port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <initializer>= 7777</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="19" column="23" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1aeeb45aff206763044266619527bd8a6a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Mirror.TelepathyTransport.NoDelay</definition>
        <argsstring></argsstring>
        <name>NoDelay</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="22" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a1977240537e16fb459db371867d0e25f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Mirror.TelepathyTransport.serverMaxMessageSize</definition>
        <argsstring></argsstring>
        <name>serverMaxMessageSize</name>
        <initializer>= 16 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="34" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1ace4cc8b61fe41ac866ad6a2a3ed13f54" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Mirror.TelepathyTransport.serverMaxReceivesPerTick</definition>
        <argsstring></argsstring>
        <name>serverMaxReceivesPerTick</name>
        <initializer>= 10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="37" column="20" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a5296efb7fcf9525e840c626ecfe80d04" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Mirror.TelepathyTransport.clientMaxMessageSize</definition>
        <argsstring></argsstring>
        <name>clientMaxMessageSize</name>
        <initializer>= 16 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="41" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1af862776645609b71d6cdc99758ae387e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Mirror.TelepathyTransport.clientMaxReceivesPerTick</definition>
        <argsstring></argsstring>
        <name>clientMaxReceivesPerTick</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="44" column="20" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_mirror_1_1_telepathy_transport_1a830629f280466f22686855594c183c2d" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int Mirror.TelepathyTransport.MaxMessageSize</definition>
        <argsstring></argsstring>
        <name>MaxMessageSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="26" column="20" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="27" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a256d34f7aa984555b28b95b2453e5449" prot="protected" static="no" mutable="no">
        <type><ref refid="class_telepathy_1_1_client" kindref="compound">Telepathy.Client</ref></type>
        <definition>Telepathy.Client Mirror.TelepathyTransport.client</definition>
        <argsstring></argsstring>
        <name>client</name>
        <initializer>= new <ref refid="class_telepathy_1_1_client" kindref="compound">Telepathy.Client</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="47" column="35" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_telepathy_transport_1a75b87ab3f61f3852e0113bf6aac02724" prot="protected" static="no" mutable="no">
        <type><ref refid="class_telepathy_1_1_server" kindref="compound">Telepathy.Server</ref></type>
        <definition>Telepathy.Server Mirror.TelepathyTransport.server</definition>
        <argsstring></argsstring>
        <name>server</name>
        <initializer>= new <ref refid="class_telepathy_1_1_server" kindref="compound">Telepathy.Server</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="48" column="35" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a2b71baf20df5d8341e5f689f5d972f68" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.TelepathyTransport.Awake</definition>
        <argsstring>()</argsstring>
        <name>Awake</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="50" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="50" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a74965349ff9ebbed53f24848c0da5e01" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Mirror.TelepathyTransport.ProcessClientMessage</definition>
        <argsstring>()</argsstring>
        <name>ProcessClientMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="92" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="92" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1abcdb0e93b24235e9109c6846f1f1c1b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.Available</definition>
        <argsstring>()</argsstring>
        <name>Available</name>
        <reimplements refid="class_mirror_1_1_transport_1a7c662214f058b24b4dec5913d09122e1">Available</reimplements>
        <briefdescription>
<para>Is this transport available in the current platform? </para>
        </briefdescription>
        <detaileddescription>
<para>Some transports might only be available in mobile</para>
<para>Many will not work in webgl</para>
<para>Example usage: return Application.platform == RuntimePlatform.WebGLPlayer</para>
<para><simplesect kind="return"><para>True if this transport works in the current platform</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="66" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a5331c3cab8955c9307f84522ca91b125" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.ClientConnected</definition>
        <argsstring>()</argsstring>
        <name>ClientConnected</name>
        <reimplements refid="class_mirror_1_1_transport_1a1d37768d58bce8ccfeafb254ff6961b5">ClientConnected</reimplements>
        <briefdescription>
<para>Determines if we are currently connected to the server </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if a connection has been established to the server</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="73" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1adadb28cf6672e015d58c5565f491ad71" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.ClientConnect</definition>
        <argsstring>(string address)</argsstring>
        <name>ClientConnect</name>
        <reimplements refid="class_mirror_1_1_transport_1aa8e301deea483e11bc3a77241bebd6c8">ClientConnect</reimplements>
        <param>
          <type>string</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address or FQDN of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="74" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a4a4122caf208b894ec69f04cbe3918a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.ClientConnect</definition>
        <argsstring>(Uri uri)</argsstring>
        <name>ClientConnect</name>
        <reimplements refid="class_mirror_1_1_transport_1ac5e84a6ef26c090e2075a513d5724cd4">ClientConnect</reimplements>
        <param>
          <type>Uri</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="75" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a11f31cd59a918a59274507bec70f5e26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.ClientSend</definition>
        <argsstring>(int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ClientSend</name>
        <reimplements refid="class_mirror_1_1_transport_1a72f04bfce4b5cc2e6e706b069a8a4c35">ClientSend</reimplements>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to the server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends!</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the send was successful</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="83" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a08c4ab88612c182eb7c3dd6678e33435" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.ClientDisconnect</definition>
        <argsstring>()</argsstring>
        <name>ClientDisconnect</name>
        <reimplements refid="class_mirror_1_1_transport_1adf81d49444738fb55ec8962535c5ed05">ClientDisconnect</reimplements>
        <briefdescription>
<para>Disconnect this client from the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="117" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a783a38f635deda855fdf28a145b3d3b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.TelepathyTransport.LateUpdate</definition>
        <argsstring>()</argsstring>
        <name>LateUpdate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="124" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="124" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1ac6e0eff4f1fd72746416a3fa76385009" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override Uri</type>
        <definition>override Uri Mirror.TelepathyTransport.ServerUri</definition>
        <argsstring>()</argsstring>
        <name>ServerUri</name>
        <reimplements refid="class_mirror_1_1_transport_1a4c03319f92bc9bccd60666aa8640b914">ServerUri</reimplements>
        <briefdescription>
<para>Retrieves the address of this server. Useful for network discovery </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the url at which this server can be reached</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="167" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a97c1df1f38e023cb2a37c57b51987066" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.ServerActive</definition>
        <argsstring>()</argsstring>
        <name>ServerActive</name>
        <reimplements refid="class_mirror_1_1_transport_1aecd7291bd0108abab27e2188bc3204b0">ServerActive</reimplements>
        <briefdescription>
<para>Determines if the server is up and running </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the transport is ready for connections from clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="177" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a5a944f452d2869443d8441c1e6dffa4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.ServerStart</definition>
        <argsstring>()</argsstring>
        <name>ServerStart</name>
        <reimplements refid="class_mirror_1_1_transport_1a104abe48a87936fbe5d31a289d83a36d">ServerStart</reimplements>
        <briefdescription>
<para>Start listening for clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="178" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1af7352db49c2558ba4d94306b68ee5691" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.ServerSend</definition>
        <argsstring>(List&lt; int &gt; connectionIds, int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ServerSend</name>
        <reimplements refid="class_mirror_1_1_transport_1a9b7725d91b696845add4defdce3c37ab">ServerSend</reimplements>
        <param>
          <type>List&lt; int &gt;</type>
          <declname>connectionIds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to one or multiple clients. We provide a list, so that transports can make use of multicasting, and avoid allocations where possible. </para>
        </briefdescription>
        <detaileddescription>
<para>We don&apos;t provide a single ServerSend function to reduce complexity. Simply overwrite this one in your <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionIds</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of client connection ids to send the data to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc...</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the data was sent to all clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="179" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="179" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a2f0724df95d343201208d31e35f1335b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Mirror.TelepathyTransport.ProcessServerMessage</definition>
        <argsstring>()</argsstring>
        <name>ProcessServerMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="192" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="192" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a5e78c63b32917d798730d49a651e3da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.TelepathyTransport.ServerDisconnect</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerDisconnect</name>
        <reimplements refid="class_mirror_1_1_transport_1a733852b2e5bc2922129700e1e3128d8b">ServerDisconnect</reimplements>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Disconnect a client from this server. Useful to kick people out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the client to disconnect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the client was kicked</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="216" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1ad2a54c4fa5d6c327b2ce5ed9cf060a52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override string</type>
        <definition>override string Mirror.TelepathyTransport.ServerGetClientAddress</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerGetClientAddress</name>
        <reimplements refid="class_mirror_1_1_transport_1a776ddfb60f41fa6645df0c74833c46f6">ServerGetClientAddress</reimplements>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Get the client address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the client</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the client</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="217" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="217" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a2c09721619ef9e9f0676dbe4bfb9a202" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.ServerStop</definition>
        <argsstring>()</argsstring>
        <name>ServerStop</name>
        <reimplements refid="class_mirror_1_1_transport_1a6e99933a82108c0dcb358ce4e60a3acb">ServerStop</reimplements>
        <briefdescription>
<para>Stop listening for clients and disconnect all existing clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="236" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a884bca48dacd2fe0f1a7bd2ae947bdf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.TelepathyTransport.Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <reimplements refid="class_mirror_1_1_transport_1a79346ab9427f1cf37ff8154856040449">Shutdown</reimplements>
        <briefdescription>
<para>Shut down the transport, both as client and server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="239" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1aed16f9818435d5f26f0a796818a51c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override int</type>
        <definition>override int Mirror.TelepathyTransport.GetMaxPacketSize</definition>
        <argsstring>(int channelId)</argsstring>
        <name>GetMaxPacketSize</name>
        <reimplements refid="class_mirror_1_1_transport_1a6340d7bcfced9674d8c4f59b0d0746cf">GetMaxPacketSize</reimplements>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <briefdescription>
<para>The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. </para>
        </briefdescription>
        <detaileddescription>
<para>GetMaxPacketSize needs to return a value at all times. Even if the <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref> isn&apos;t running, or isn&apos;t <ref refid="class_mirror_1_1_telepathy_transport_1abcdb0e93b24235e9109c6846f1f1c1b6" kindref="member">Available()</ref>. This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size in bytes that can be sent via the provided channel</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="246" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_telepathy_transport_1a2983d00a66d8415f79683ff0f19b1e88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override string</type>
        <definition>override string Mirror.TelepathyTransport.ToString</definition>
        <argsstring>()</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="251" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="251" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Mirror.TelepathyTransport</label>
        <link refid="class_mirror_1_1_telepathy_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>MonoBehaviour</label>
      </node>
      <node id="2">
        <label>Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>Mirror.UnityEventException</label>
        <link refid="class_mirror_1_1_unity_event_exception"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Mirror.TelepathyTransport</label>
        <link refid="class_mirror_1_1_telepathy_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>UnityEvent&lt; Exception &gt;</label>
      </node>
      <node id="9">
        <label>Mirror.UnityEventIntException</label>
        <link refid="class_mirror_1_1_unity_event_int_exception"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>UnityEvent&lt; ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
      <node id="11">
        <label>Mirror.ClientDataReceivedEvent</label>
        <link refid="class_mirror_1_1_client_data_received_event"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Mirror.Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>OnServerConnected</edgelabel>
          <edgelabel>OnServerDisconnected</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>OnClientError</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>activeTransport</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>OnServerError</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>OnClientDataReceived</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>OnServerDataReceived</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Mirror.UnityEventInt</label>
        <link refid="class_mirror_1_1_unity_event_int"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>UnityEvent&lt; int, Exception &gt;</label>
      </node>
      <node id="3">
        <label>MonoBehaviour</label>
      </node>
      <node id="2">
        <label>Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>OnServerConnected</edgelabel>
          <edgelabel>OnServerDisconnected</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>OnClientError</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>activeTransport</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>OnServerError</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>OnClientDataReceived</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>OnServerDataReceived</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>Mirror.ServerDataReceivedEvent</label>
        <link refid="class_mirror_1_1_server_data_received_event"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>UnityEvent&lt; int &gt;</label>
      </node>
      <node id="14">
        <label>UnityEvent&lt; int, ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" line="13" column="11" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/TelepathyTransport.cs" bodystart="14" bodyend="271"/>
    <listofallmembers>
      <member refid="class_mirror_1_1_transport_1a4e187471cf106ef6068e4347b1d2fdee" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>activeTransport</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1abcdb0e93b24235e9109c6846f1f1c1b6" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>Available</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a2b71baf20df5d8341e5f689f5d972f68" prot="private" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>Awake</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a256d34f7aa984555b28b95b2453e5449" prot="protected" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>client</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1adadb28cf6672e015d58c5565f491ad71" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a4a4122caf208b894ec69f04cbe3918a3" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a5331c3cab8955c9307f84522ca91b125" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ClientConnected</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a08c4ab88612c182eb7c3dd6678e33435" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ClientDisconnect</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a5296efb7fcf9525e840c626ecfe80d04" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>clientMaxMessageSize</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1af862776645609b71d6cdc99758ae387e" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>clientMaxReceivesPerTick</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a11f31cd59a918a59274507bec70f5e26" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ClientSend</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1aed16f9818435d5f26f0a796818a51c39" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>GetMaxPacketSize</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a783a38f635deda855fdf28a145b3d3b5" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>LateUpdate</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a830629f280466f22686855594c183c2d" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>MaxMessageSize</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1aeeb45aff206763044266619527bd8a6a" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>NoDelay</name></member>
      <member refid="class_mirror_1_1_transport_1a60da8b19a9fcc0e4e5b732887ed750dd" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>OnApplicationQuit</name></member>
      <member refid="class_mirror_1_1_transport_1acafeb3fc7051eb2456961a4aab66bd67" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnClientConnected</name></member>
      <member refid="class_mirror_1_1_transport_1a73f5e6da15756d7bf2bcfd12429be058" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnClientDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a32abf6e68728cdb49cd31a9208a7eb55" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnClientDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a288982823f99bfd439277ee2a174173b" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnClientError</name></member>
      <member refid="class_mirror_1_1_transport_1a4e8ff19ebeb434fec9b7262fa1b9638c" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnServerConnected</name></member>
      <member refid="class_mirror_1_1_transport_1ac5d03436d77ffe03d3391629a1a85c16" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnServerDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a14b8d3ba13b5f98924aeec45af184d45" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnServerDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a656d1f29dc7a753a6c63e6c9cfdc73cc" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>OnServerError</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a70a9a54307fed1bb56df72002b361e19" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>port</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a74965349ff9ebbed53f24848c0da5e01" prot="private" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>ProcessClientMessage</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a2f0724df95d343201208d31e35f1335b" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>ProcessServerMessage</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a4c3b0b7f38c960b7fd43dfd585b48bc9" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>Scheme</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a75b87ab3f61f3852e0113bf6aac02724" prot="protected" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>server</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a97c1df1f38e023cb2a37c57b51987066" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerActive</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a5e78c63b32917d798730d49a651e3da4" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerDisconnect</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1ad2a54c4fa5d6c327b2ce5ed9cf060a52" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerGetClientAddress</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a1977240537e16fb459db371867d0e25f" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>serverMaxMessageSize</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1ace4cc8b61fe41ac866ad6a2a3ed13f54" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>serverMaxReceivesPerTick</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1af7352db49c2558ba4d94306b68ee5691" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerSend</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a5a944f452d2869443d8441c1e6dffa4e" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerStart</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a2c09721619ef9e9f0676dbe4bfb9a202" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerStop</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1ac6e0eff4f1fd72746416a3fa76385009" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>ServerUri</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a884bca48dacd2fe0f1a7bd2ae947bdf9" prot="public" virt="virtual"><scope>Mirror::TelepathyTransport</scope><name>Shutdown</name></member>
      <member refid="class_mirror_1_1_telepathy_transport_1a2983d00a66d8415f79683ff0f19b1e88" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>ToString</name></member>
      <member refid="class_mirror_1_1_transport_1ad1a6da8f541579f53d7a2c61cbc820c6" prot="public" virt="non-virtual"><scope>Mirror::TelepathyTransport</scope><name>Update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_mirror_1_1_client_scene" kind="class" language="C#" prot="public">
    <compoundname>Mirror::ClientScene</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1a38ef471ed77e2ba1701a3467a33e89be" prot="private" static="yes" mutable="no">
        <type>readonly ILogger</type>
        <definition>readonly ILogger Mirror.ClientScene.logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <initializer>= LogFactory.GetLogger(typeof(ClientScene))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="21" column="33" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1a37bfbf6828ffd34c9426cb6a91ee9341" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Mirror.ClientScene.isSpawnFinished</definition>
        <argsstring></argsstring>
        <name>isSpawnFinished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="23" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1af8a873054fccc4911636820a9daeaaf0" prot="private" static="yes" mutable="no">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
        <definition>NetworkIdentity Mirror.ClientScene._localPlayer</definition>
        <argsstring></argsstring>
        <name>_localPlayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="24" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_mirror_1_1_client_scene_1a546ea3200f93885a512e583312f8d6a4" prot="public" static="yes" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref>?</type>
        <definition>NetworkIdentity? Mirror.ClientScene.localPlayer</definition>
        <argsstring></argsstring>
        <name>localPlayer</name>
        <briefdescription>
<para><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> of the localPlayer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="29" column="39" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="property" id="class_mirror_1_1_client_scene_1a550f1a3e836a8133e7eb8d380e85d713" prot="public" static="yes" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Mirror.ClientScene.ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
<para>Returns true when a client&apos;s connection has been set to ready. </para>
        </briefdescription>
        <detaileddescription>
<para>A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game.</para>
<para>This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady().</para>
<para>This is done when changing scenes so that clients don&apos;t receive state update messages during scene loading.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="53" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="property" id="class_mirror_1_1_client_scene_1ae22ac6678ed9255b44e590188c041f85" prot="public" static="yes" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref></type>
        <definition>NetworkConnection Mirror.ClientScene.readyConnection</definition>
        <argsstring></argsstring>
        <name>readyConnection</name>
        <briefdescription>
<para>The <ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref> object that is currently &quot;ready&quot;. This is the connection to the server where objects are spawned from. </para>
        </briefdescription>
        <detaileddescription>
<para>This connection can be used to send messages to the server. There can only be one ClientScene and ready connection at a time.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="59" column="41" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="59" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="event">
      <memberdef kind="event" id="class_mirror_1_1_client_scene_1a2152a5498dd0870ffaadaa45c6935746" prot="public" static="yes" add="no" remove="no" raise="no">
        <type>LocalplayerChanged</type>
        <definition>LocalplayerChanged Mirror.ClientScene.onLocalPlayerChanged</definition>
        <argsstring></argsstring>
        <name>onLocalPlayerChanged</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="45" column="48" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1ab6cc513f2c2e52c5fed84846f3110da7" prot="public" static="yes" mutable="no">
        <type>readonly Dictionary&lt; Guid, GameObject &gt;</type>
        <definition>readonly Dictionary&lt;Guid, GameObject&gt; Mirror.ClientScene.prefabs</definition>
        <argsstring></argsstring>
        <name>prefabs</name>
        <initializer>= new Dictionary&lt;Guid, GameObject&gt;()</initializer>
        <briefdescription>
<para>This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). </para>
        </briefdescription>
        <detaileddescription>
<para>The key to the dictionary is the prefab asset Id.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="65" column="43" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1a95058943044ba4ff8ee2fc39ff0b7672" prot="public" static="yes" mutable="no">
        <type>readonly Dictionary&lt; ulong, <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> &gt;</type>
        <definition>readonly Dictionary&lt;ulong, NetworkIdentity&gt; Mirror.ClientScene.spawnableObjects</definition>
        <argsstring></argsstring>
        <name>spawnableObjects</name>
        <initializer>= new Dictionary&lt;ulong, <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref>&gt;()</initializer>
        <briefdescription>
<para>This is dictionary of the disabled <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> objects in the scene that could be spawned by messages from the server. </para>
        </briefdescription>
        <detaileddescription>
<para>The key to the dictionary is the <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> sceneId.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="71" column="43" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1a7ab70cbabdc4b624304c9982725213f3" prot="package" static="yes" mutable="no">
        <type>readonly Dictionary&lt; Guid, SpawnHandlerDelegate &gt;</type>
        <definition>readonly Dictionary&lt;Guid, SpawnHandlerDelegate&gt; Mirror.ClientScene.spawnHandlers</definition>
        <argsstring></argsstring>
        <name>spawnHandlers</name>
        <initializer>= new Dictionary&lt;Guid, SpawnHandlerDelegate&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="74" column="45" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_client_scene_1a6c8ccf1c9a440d18cf4fbb36009623e7" prot="package" static="yes" mutable="no">
        <type>readonly Dictionary&lt; Guid, UnSpawnDelegate &gt;</type>
        <definition>readonly Dictionary&lt;Guid, UnSpawnDelegate&gt; Mirror.ClientScene.unspawnHandlers</definition>
        <argsstring></argsstring>
        <name>unspawnHandlers</name>
        <initializer>= new Dictionary&lt;Guid, UnSpawnDelegate&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="75" column="45" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a0ec24c3d8498bf68893e084dade44a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Mirror.ClientScene.LocalplayerChanged</definition>
        <argsstring>(NetworkIdentity oldPlayer, NetworkIdentity newPlayer)</argsstring>
        <name>LocalplayerChanged</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>oldPlayer</declname>
        </param>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>newPlayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="44" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-func">
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a52dc01133d5e2c8e6c50f6ca2bf0f902" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="77" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a6f9ee1044868be9d4cbc06d8f4747d7f" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.InternalAddPlayer</definition>
        <argsstring>(NetworkIdentity identity)</argsstring>
        <name>InternalAddPlayer</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="88" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="88" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ad310d150b295a124f8aa965d1a603c4f" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.HandleClientDisconnect</definition>
        <argsstring>(NetworkConnection conn)</argsstring>
        <name>HandleClientDisconnect</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="183" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="183" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1aff0bf7423d6b2574d4cbaed81651b017" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.ApplySpawnPayload</definition>
        <argsstring>(NetworkIdentity identity, SpawnMessage msg)</argsstring>
        <name>ApplySpawnPayload</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>identity</declname>
        </param>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="728" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="728" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a35471d72efbaeb0fcd60e30d862cea61" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnSpawn</definition>
        <argsstring>(SpawnMessage msg)</argsstring>
        <name>OnSpawn</name>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="769" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="769" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1af17f27ef3ac4e1a1853257a5235a185c" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.FindOrSpawnObject</definition>
        <argsstring>(SpawnMessage msg, out NetworkIdentity identity)</argsstring>
        <name>FindOrSpawnObject</name>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <param>
          <type>out <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>identity</declname>
        </param>
        <briefdescription>
<para>Finds Existing Object with NetId or spawns a new one using AssetId or sceneId </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="782" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="782" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a8e5662389678279ec71b2e56b93eaf2b" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnObjectSpawnStarted</definition>
        <argsstring>(ObjectSpawnStartedMessage _)</argsstring>
        <name>OnObjectSpawnStarted</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_spawn_started_message" kindref="compound">ObjectSpawnStartedMessage</ref></type>
          <declname>_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="877" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="877" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a31c556518e5ca0a7b3153fc80823d678" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnObjectSpawnFinished</definition>
        <argsstring>(ObjectSpawnFinishedMessage _)</argsstring>
        <name>OnObjectSpawnFinished</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_spawn_finished_message" kindref="compound">ObjectSpawnFinishedMessage</ref></type>
          <declname>_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="885" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="885" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a57b8ad4c70da455920632c5f5a155245" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnObjectHide</definition>
        <argsstring>(ObjectHideMessage msg)</argsstring>
        <name>OnObjectHide</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_hide_message" kindref="compound">ObjectHideMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="901" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="901" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a1af2e73c536a02b4bdafd76ad767f7e2" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnObjectDestroy</definition>
        <argsstring>(ObjectDestroyMessage msg)</argsstring>
        <name>OnObjectDestroy</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_destroy_message" kindref="compound">ObjectDestroyMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="906" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ae6192ca87bf1ae8afefaa4d89443fcfd" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnHostClientObjectDestroy</definition>
        <argsstring>(ObjectDestroyMessage msg)</argsstring>
        <name>OnHostClientObjectDestroy</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_destroy_message" kindref="compound">ObjectDestroyMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="942" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="942" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1af8c16d086787ef869a33a0394b87c18c" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnHostClientObjectHide</definition>
        <argsstring>(ObjectHideMessage msg)</argsstring>
        <name>OnHostClientObjectHide</name>
        <param>
          <type><ref refid="struct_mirror_1_1_object_hide_message" kindref="compound">ObjectHideMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="949" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="949" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a7945ecdecc514579392e128faa41572a" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnHostClientSpawn</definition>
        <argsstring>(SpawnMessage msg)</argsstring>
        <name>OnHostClientSpawn</name>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="959" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="959" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1af2e623051dc7a6c5893917a7c7c56030" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnUpdateVarsMessage</definition>
        <argsstring>(UpdateVarsMessage msg)</argsstring>
        <name>OnUpdateVarsMessage</name>
        <param>
          <type><ref refid="struct_mirror_1_1_update_vars_message" kindref="compound">UpdateVarsMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="974" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="974" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ae0b4e3dd9f65597c1da6432fef2efbae" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnRPCMessage</definition>
        <argsstring>(RpcMessage msg)</argsstring>
        <name>OnRPCMessage</name>
        <param>
          <type><ref refid="struct_mirror_1_1_rpc_message" kindref="compound">RpcMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="989" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="989" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1adb39593c6c226b229a4aa1711c70e88a" prot="package" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.OnSyncEventMessage</definition>
        <argsstring>(SyncEventMessage msg)</argsstring>
        <name>OnSyncEventMessage</name>
        <param>
          <type><ref refid="struct_mirror_1_1_sync_event_message" kindref="compound">SyncEventMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="1000" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="1000" bodyend="1013"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a5e51ad9059beb7de4a5efdf16c2e9426" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.AddPlayer</definition>
        <argsstring>(NetworkConnection readyConn)</argsstring>
        <name>AddPlayer</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref></type>
          <declname>readyConn</declname>
        </param>
        <briefdescription>
<para>This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and <ref refid="class_mirror_1_1_network_manager_1a05f963336a3309b53ad415ed55333f75" kindref="member">NetworkManager.OnServerAddPlayer</ref> is called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a <ref refid="class_mirror_1_1_network_reader" kindref="compound">NetworkReader</ref> that contains the contents of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>extraMessage can contain character selection, etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>readyConn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection to become ready for this client.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if player was added.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="116" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="116" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a31f1156454383fedefd46493217ed5dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.RemovePlayer</definition>
        <argsstring>()</argsstring>
        <name>RemovePlayer</name>
        <briefdescription>
<para>Obsolete: Removed as a security risk. Use <ref refid="" kindref="compound">NetworkServer.RemovePlayerForConnection</ref> instead. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="148" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a00f241600d6e44ebe2524c6000e217be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.Ready</definition>
        <argsstring>(NetworkConnection conn)</argsstring>
        <name>Ready</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_connection" kindref="compound">NetworkConnection</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Signal that the client connection is ready to enter the game. </para>
        </briefdescription>
        <detaileddescription>
<para>This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The client connection which is ready.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if succcessful</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="156" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="156" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a486324279ace7f5474ab1aea0c7cb1ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.PrepareToSpawnSceneObjects</definition>
        <argsstring>()</argsstring>
        <name>PrepareToSpawnSceneObjects</name>
        <briefdescription>
<para>Call this after loading/unloading a scene in the client after connection to register the spawnable objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="207" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="207" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a4ef42ac9a0099dc4dbaeeea45f690834" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.GetPrefab</definition>
        <argsstring>(Guid assetId, out GameObject prefab)</argsstring>
        <name>GetPrefab</name>
        <param>
          <type>Guid</type>
          <declname>assetId</declname>
        </param>
        <param>
          <type>out GameObject</type>
          <declname>prefab</declname>
        </param>
        <briefdescription>
<para>Find the registered prefab for this asset id. Useful for debuggers </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>assetId</parametername>
</parameternamelist>
<parameterdescription>
<para>asset id of the prefab</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>the prefab gameobject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if prefab was registered</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="231" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a54acea3c13c6852e140752fc134851cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab, Guid newAssetId)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <param>
          <type>Guid</type>
          <declname>newAssetId</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para>NOTE: newAssetId can not be set on GameObjects that already have an assetId</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A GameObject that will be spawned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newAssetId</parametername>
</parameternamelist>
<parameterdescription>
<para>An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="287" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="287" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1aac8548e32dd75fa589a1134b5de6998c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A Prefab that will be spawned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="326" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="326" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a998ed08bd810b4261760adb315e73610" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab, Guid newAssetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <param>
          <type>Guid</type>
          <declname>newAssetId</declname>
        </param>
        <param>
          <type>SpawnDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para>NOTE: newAssetId can not be set on GameObjects that already have an assetId</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A GameObject that will be spawned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newAssetId</parametername>
</parameternamelist>
<parameterdescription>
<para>An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="355" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="355" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a5810d672ac4847a50433867e24a280b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <param>
          <type>SpawnDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A Prefab that will be spawned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="376" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="376" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a4a5d11243ddd07188dc7546c08eed022" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab, Guid newAssetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <param>
          <type>Guid</type>
          <declname>newAssetId</declname>
        </param>
        <param>
          <type>SpawnHandlerDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para>NOTE: newAssetId can not be set on GameObjects that already have an assetId</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A GameObject that will be spawned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newAssetId</parametername>
</parameternamelist>
<parameterdescription>
<para>An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="426" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="426" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a60e170a4221862d0851d0dc1a94608d6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefab</definition>
        <argsstring>(GameObject prefab, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <param>
          <type>SpawnHandlerDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>Registers a prefab with the spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.</para>
<para>The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.</para>
<para>The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>A Prefab that will be spawned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="506" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="506" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a08c2f3261272e5b569cff0e08d757fd3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.UnregisterPrefab</definition>
        <argsstring>(GameObject prefab)</argsstring>
        <name>UnregisterPrefab</name>
        <param>
          <type>GameObject</type>
          <declname>prefab</declname>
        </param>
        <briefdescription>
<para>Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefab to be removed from registration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="574" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="574" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1afd66222ab6b4bff49f0f55e137f425dc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterSpawnHandler</definition>
        <argsstring>(Guid assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterSpawnHandler</name>
        <param>
          <type>Guid</type>
          <declname>assetId</declname>
        </param>
        <param>
          <type>SpawnDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>This is an advanced spawning function that registers a custom assetId with the UNET spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>assetId</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom assetId string.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="603" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="603" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a486bf483c9d68f99c61cf12c9cdd75f5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterSpawnHandler</definition>
        <argsstring>(Guid assetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler)</argsstring>
        <name>RegisterSpawnHandler</name>
        <param>
          <type>Guid</type>
          <declname>assetId</declname>
        </param>
        <param>
          <type>SpawnHandlerDelegate</type>
          <declname>spawnHandler</declname>
        </param>
        <param>
          <type>UnSpawnDelegate</type>
          <declname>unspawnHandler</declname>
        </param>
        <briefdescription>
<para>This is an advanced spawning function that registers a custom assetId with the UNET spawning system. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>assetId</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom assetId string.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unspawnHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>A method to use as a custom un-spawnhandler on clients.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="622" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="622" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a49456bb6aff33f4b90a7bb773f477d76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.UnregisterSpawnHandler</definition>
        <argsstring>(Guid assetId)</argsstring>
        <name>UnregisterSpawnHandler</name>
        <param>
          <type>Guid</type>
          <declname>assetId</declname>
        </param>
        <briefdescription>
<para>Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>assetId</parametername>
</parameternamelist>
<parameterdescription>
<para>The assetId for the handler to be removed for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="663" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="663" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1aa3dac6d3741a2425f140afacd547a8bc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.ClearSpawners</definition>
        <argsstring>()</argsstring>
        <name>ClearSpawners</name>
        <briefdescription>
<para>This clears the registered spawn prefabs and spawn handler functions for this client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="672" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="672" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a79a63029dfa7ee2c98d80d1be7cb3ded" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.DestroyAllClientObjects</definition>
        <argsstring>()</argsstring>
        <name>DestroyAllClientObjects</name>
        <briefdescription>
<para>Destroys all networked objects on the client. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to clean up when a network connection is closed.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="693" column="28" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="693" bodyend="726"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ac16f0a68a24582f253d7a0b8a468d257" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.ConsiderForSpawning</definition>
        <argsstring>(NetworkIdentity identity)</argsstring>
        <name>ConsiderForSpawning</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>identity</declname>
        </param>
        <briefdescription>
<para>Checks if identity is not spawned yet, not hidden and has sceneId </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="195" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1af4214c2711246d6b30a9f346a13e641d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.RegisterPrefabIdentity</definition>
        <argsstring>(NetworkIdentity prefab)</argsstring>
        <name>RegisterPrefabIdentity</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>prefab</declname>
        </param>
        <briefdescription>
<para>Valids Prefab then adds it to prefabs dictionary </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefab</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref> on Prefab GameObject</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="242" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="242" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a23a5944997a3d4e5183c15cb42874aef" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Mirror.ClientScene.InvokeUnSpawnHandler</definition>
        <argsstring>(Guid assetId, GameObject obj)</argsstring>
        <name>InvokeUnSpawnHandler</name>
        <param>
          <type>Guid</type>
          <declname>assetId</declname>
        </param>
        <param>
          <type>GameObject</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="679" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="679" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ad9482f8ccc07afc7bc43cbf766fd3cec" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
        <definition>static NetworkIdentity Mirror.ClientScene.GetExistingObject</definition>
        <argsstring>(uint netid)</argsstring>
        <name>GetExistingObject</name>
        <param>
          <type>uint</type>
          <declname>netid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="810" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="810" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a2fd6d073a76ba4e3c442699f5e3762d9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
        <definition>static NetworkIdentity Mirror.ClientScene.SpawnPrefab</definition>
        <argsstring>(SpawnMessage msg)</argsstring>
        <name>SpawnPrefab</name>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="816" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="816" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1aa415f575406f193edc0b1e725e766d3e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
        <definition>static NetworkIdentity Mirror.ClientScene.SpawnSceneObject</definition>
        <argsstring>(SpawnMessage msg)</argsstring>
        <name>SpawnSceneObject</name>
        <param>
          <type><ref refid="struct_mirror_1_1_spawn_message" kindref="compound">SpawnMessage</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="848" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="848" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1ae403fad9f28ff7d01c30143668adfdc0" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
        <definition>static NetworkIdentity Mirror.ClientScene.GetAndRemoveSceneObject</definition>
        <argsstring>(ulong sceneId)</argsstring>
        <name>GetAndRemoveSceneObject</name>
        <param>
          <type>ulong</type>
          <declname>sceneId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="867" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="867" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a75c031825519c93cd054c6b821ff4a97" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.DestroyObject</definition>
        <argsstring>(uint netId)</argsstring>
        <name>DestroyObject</name>
        <param>
          <type>uint</type>
          <declname>netId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="911" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="911" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_client_scene_1a279cf061e4d83a0ffa3f0782e17b91bd" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Mirror.ClientScene.CheckForLocalPlayer</definition>
        <argsstring>(NetworkIdentity identity)</argsstring>
        <name>CheckForLocalPlayer</name>
        <param>
          <type><ref refid="class_mirror_1_1_network_identity" kindref="compound">NetworkIdentity</ref></type>
          <declname>identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="1015" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="1015" bodyend="1025"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A client manager which contains static client information and functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready.</para>
<para>The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready().</para>
<para>The ClientScene is used by the <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref>, but it can be used by itself.</para>
<para>As the ClientScene manages player objects on the client, it is where clients request to add players. The <ref refid="class_mirror_1_1_network_manager" kindref="compound">NetworkManager</ref> does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client.</para>
<para>Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running).</para>
    </detaileddescription>
    <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" line="19" column="19" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/ClientScene.cs" bodystart="20" bodyend="1026"/>
    <listofallmembers>
      <member refid="class_mirror_1_1_client_scene_1af8a873054fccc4911636820a9daeaaf0" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>_localPlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1a5e51ad9059beb7de4a5efdf16c2e9426" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>AddPlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1aff0bf7423d6b2574d4cbaed81651b017" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>ApplySpawnPayload</name></member>
      <member refid="class_mirror_1_1_client_scene_1a279cf061e4d83a0ffa3f0782e17b91bd" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>CheckForLocalPlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1aa3dac6d3741a2425f140afacd547a8bc" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>ClearSpawners</name></member>
      <member refid="class_mirror_1_1_client_scene_1ac16f0a68a24582f253d7a0b8a468d257" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>ConsiderForSpawning</name></member>
      <member refid="class_mirror_1_1_client_scene_1a79a63029dfa7ee2c98d80d1be7cb3ded" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>DestroyAllClientObjects</name></member>
      <member refid="class_mirror_1_1_client_scene_1a75c031825519c93cd054c6b821ff4a97" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>DestroyObject</name></member>
      <member refid="class_mirror_1_1_client_scene_1af17f27ef3ac4e1a1853257a5235a185c" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>FindOrSpawnObject</name></member>
      <member refid="class_mirror_1_1_client_scene_1ae403fad9f28ff7d01c30143668adfdc0" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>GetAndRemoveSceneObject</name></member>
      <member refid="class_mirror_1_1_client_scene_1ad9482f8ccc07afc7bc43cbf766fd3cec" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>GetExistingObject</name></member>
      <member refid="class_mirror_1_1_client_scene_1a4ef42ac9a0099dc4dbaeeea45f690834" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>GetPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1ad310d150b295a124f8aa965d1a603c4f" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>HandleClientDisconnect</name></member>
      <member refid="class_mirror_1_1_client_scene_1a6f9ee1044868be9d4cbc06d8f4747d7f" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>InternalAddPlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1a23a5944997a3d4e5183c15cb42874aef" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>InvokeUnSpawnHandler</name></member>
      <member refid="class_mirror_1_1_client_scene_1a37bfbf6828ffd34c9426cb6a91ee9341" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>isSpawnFinished</name></member>
      <member refid="class_mirror_1_1_client_scene_1a546ea3200f93885a512e583312f8d6a4" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>localPlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1a0ec24c3d8498bf68893e084dade44a92" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>LocalplayerChanged</name></member>
      <member refid="class_mirror_1_1_client_scene_1a38ef471ed77e2ba1701a3467a33e89be" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>logger</name></member>
      <member refid="class_mirror_1_1_client_scene_1ae6192ca87bf1ae8afefaa4d89443fcfd" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnHostClientObjectDestroy</name></member>
      <member refid="class_mirror_1_1_client_scene_1af8c16d086787ef869a33a0394b87c18c" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnHostClientObjectHide</name></member>
      <member refid="class_mirror_1_1_client_scene_1a7945ecdecc514579392e128faa41572a" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnHostClientSpawn</name></member>
      <member refid="class_mirror_1_1_client_scene_1a2152a5498dd0870ffaadaa45c6935746" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>onLocalPlayerChanged</name></member>
      <member refid="class_mirror_1_1_client_scene_1a1af2e73c536a02b4bdafd76ad767f7e2" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnObjectDestroy</name></member>
      <member refid="class_mirror_1_1_client_scene_1a57b8ad4c70da455920632c5f5a155245" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnObjectHide</name></member>
      <member refid="class_mirror_1_1_client_scene_1a31c556518e5ca0a7b3153fc80823d678" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnObjectSpawnFinished</name></member>
      <member refid="class_mirror_1_1_client_scene_1a8e5662389678279ec71b2e56b93eaf2b" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnObjectSpawnStarted</name></member>
      <member refid="class_mirror_1_1_client_scene_1ae0b4e3dd9f65597c1da6432fef2efbae" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnRPCMessage</name></member>
      <member refid="class_mirror_1_1_client_scene_1a35471d72efbaeb0fcd60e30d862cea61" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnSpawn</name></member>
      <member refid="class_mirror_1_1_client_scene_1adb39593c6c226b229a4aa1711c70e88a" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnSyncEventMessage</name></member>
      <member refid="class_mirror_1_1_client_scene_1af2e623051dc7a6c5893917a7c7c56030" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>OnUpdateVarsMessage</name></member>
      <member refid="class_mirror_1_1_client_scene_1ab6cc513f2c2e52c5fed84846f3110da7" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>prefabs</name></member>
      <member refid="class_mirror_1_1_client_scene_1a486324279ace7f5474ab1aea0c7cb1ed" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>PrepareToSpawnSceneObjects</name></member>
      <member refid="class_mirror_1_1_client_scene_1a00f241600d6e44ebe2524c6000e217be" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>Ready</name></member>
      <member refid="class_mirror_1_1_client_scene_1a550f1a3e836a8133e7eb8d380e85d713" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>ready</name></member>
      <member refid="class_mirror_1_1_client_scene_1ae22ac6678ed9255b44e590188c041f85" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>readyConnection</name></member>
      <member refid="class_mirror_1_1_client_scene_1a54acea3c13c6852e140752fc134851cb" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1aac8548e32dd75fa589a1134b5de6998c" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1a998ed08bd810b4261760adb315e73610" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1a5810d672ac4847a50433867e24a280b0" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1a4a5d11243ddd07188dc7546c08eed022" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1a60e170a4221862d0851d0dc1a94608d6" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1af4214c2711246d6b30a9f346a13e641d" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterPrefabIdentity</name></member>
      <member refid="class_mirror_1_1_client_scene_1afd66222ab6b4bff49f0f55e137f425dc" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterSpawnHandler</name></member>
      <member refid="class_mirror_1_1_client_scene_1a486bf483c9d68f99c61cf12c9cdd75f5" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RegisterSpawnHandler</name></member>
      <member refid="class_mirror_1_1_client_scene_1a31f1156454383fedefd46493217ed5dd" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>RemovePlayer</name></member>
      <member refid="class_mirror_1_1_client_scene_1a52dc01133d5e2c8e6c50f6ca2bf0f902" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>Shutdown</name></member>
      <member refid="class_mirror_1_1_client_scene_1a95058943044ba4ff8ee2fc39ff0b7672" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>spawnableObjects</name></member>
      <member refid="class_mirror_1_1_client_scene_1a7ab70cbabdc4b624304c9982725213f3" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>spawnHandlers</name></member>
      <member refid="class_mirror_1_1_client_scene_1a2fd6d073a76ba4e3c442699f5e3762d9" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>SpawnPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1aa415f575406f193edc0b1e725e766d3e" prot="private" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>SpawnSceneObject</name></member>
      <member refid="class_mirror_1_1_client_scene_1a08c2f3261272e5b569cff0e08d757fd3" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>UnregisterPrefab</name></member>
      <member refid="class_mirror_1_1_client_scene_1a49456bb6aff33f4b90a7bb773f477d76" prot="public" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>UnregisterSpawnHandler</name></member>
      <member refid="class_mirror_1_1_client_scene_1a6c8ccf1c9a440d18cf4fbb36009623e7" prot="package" virt="non-virtual"><scope>Mirror::ClientScene</scope><name>unspawnHandlers</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

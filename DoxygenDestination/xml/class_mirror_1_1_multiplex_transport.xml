<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_mirror_1_1_multiplex_transport" kind="class" language="C#" prot="public">
    <compoundname>Mirror::MultiplexTransport</compoundname>
    <basecompoundref refid="class_mirror_1_1_transport" prot="public" virt="non-virtual">Mirror.Transport</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_multiplex_transport_1ac2452223ad0c41590c23763d1802ced4" prot="public" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref>[]</type>
        <definition>Transport [] Mirror.MultiplexTransport.transports</definition>
        <argsstring></argsstring>
        <name>transports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="11" column="26" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_mirror_1_1_multiplex_transport_1a4db52db4e3ec6c093bc34973c1b6f116" prot="private" static="no" mutable="no">
        <type><ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref></type>
        <definition>Transport Mirror.MultiplexTransport.available</definition>
        <argsstring></argsstring>
        <name>available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="13" column="19" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mirror_1_1_multiplex_transport_1a516eea23f28e69c354300ede6cfb0d4b" prot="private" static="no" mutable="no">
        <type>List&lt; int &gt;[]</type>
        <definition>List&lt;int&gt; [] Mirror.MultiplexTransport.recipientsCache</definition>
        <argsstring></argsstring>
        <name>recipientsCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="17" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1ad87fa522dbffc912366292c9c5acef44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.MultiplexTransport.Awake</definition>
        <argsstring>()</argsstring>
        <name>Awake</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="19" column="21" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1ad98c9bce475c4f3f60ff76b73daca3ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.Available</definition>
        <argsstring>()</argsstring>
        <name>Available</name>
        <reimplements refid="class_mirror_1_1_transport_1a7c662214f058b24b4dec5913d09122e1">Available</reimplements>
        <briefdescription>
<para>Is this transport available in the current platform? </para>
        </briefdescription>
        <detaileddescription>
<para>Some transports might only be available in mobile</para>
<para>Many will not work in webgl</para>
<para>Example usage: return Application.platform == RuntimePlatform.WebGLPlayer</para>
<para><simplesect kind="return"><para>True if this transport works in the current platform</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="45" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="45" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a2f4b96f51f862f798efc0b0f00e6125e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.ClientConnect</definition>
        <argsstring>(string address)</argsstring>
        <name>ClientConnect</name>
        <reimplements refid="class_mirror_1_1_transport_1aa8e301deea483e11bc3a77241bebd6c8">ClientConnect</reimplements>
        <param>
          <type>string</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The IP address or FQDN of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="72" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="72" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a80db4247bdcaec3058eba6307188040a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.ClientConnect</definition>
        <argsstring>(Uri uri)</argsstring>
        <name>ClientConnect</name>
        <reimplements refid="class_mirror_1_1_transport_1ac5e84a6ef26c090e2075a513d5724cd4">ClientConnect</reimplements>
        <param>
          <type>Uri</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Establish a connection to a server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the server we are trying to connect to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="86" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="86" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a641c5ae1ac013c3f4cd7bdd6590e8fa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.ClientConnected</definition>
        <argsstring>()</argsstring>
        <name>ClientConnected</name>
        <reimplements refid="class_mirror_1_1_transport_1a1d37768d58bce8ccfeafb254ff6961b5">ClientConnected</reimplements>
        <briefdescription>
<para>Determines if we are currently connected to the server </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if a connection has been established to the server</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="107" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a9ed0db19440dcb216448bd4ef7750c7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.ClientDisconnect</definition>
        <argsstring>()</argsstring>
        <name>ClientDisconnect</name>
        <reimplements refid="class_mirror_1_1_transport_1adf81d49444738fb55ec8962535c5ed05">ClientDisconnect</reimplements>
        <briefdescription>
<para>Disconnect this client from the server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="112" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1aeddfb34290f9679f0a7e0002166d5b4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.ClientSend</definition>
        <argsstring>(int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ClientSend</name>
        <reimplements refid="class_mirror_1_1_transport_1a72f04bfce4b5cc2e6e706b069a8a4c35">ClientSend</reimplements>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to the server </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends!</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the send was successful</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="118" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1ab0a39ef76d62f2191e7de6e5f794617b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override Uri</type>
        <definition>override Uri Mirror.MultiplexTransport.ServerUri</definition>
        <argsstring>()</argsstring>
        <name>ServerUri</name>
        <reimplements refid="class_mirror_1_1_transport_1a4c03319f92bc9bccd60666aa8640b914">ServerUri</reimplements>
        <briefdescription>
<para>Retrieves the address of this server. Useful for network discovery </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the url at which this server can be reached</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="183" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a318b01792419938222063f19efc21121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.ServerActive</definition>
        <argsstring>()</argsstring>
        <name>ServerActive</name>
        <reimplements refid="class_mirror_1_1_transport_1aecd7291bd0108abab27e2188bc3204b0">ServerActive</reimplements>
        <briefdescription>
<para>Determines if the server is up and running </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the transport is ready for connections from clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="189" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="189" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1afdf2563f5add8134a4c0b6c8cad9b88b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override string</type>
        <definition>override string Mirror.MultiplexTransport.ServerGetClientAddress</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerGetClientAddress</name>
        <reimplements refid="class_mirror_1_1_transport_1a776ddfb60f41fa6645df0c74833c46f6">ServerGetClientAddress</reimplements>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Get the client address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the client</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the client</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="202" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a98430e169e0950e985460ee0fc8d26e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.ServerDisconnect</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ServerDisconnect</name>
        <reimplements refid="class_mirror_1_1_transport_1a733852b2e5bc2922129700e1e3128d8b">ServerDisconnect</reimplements>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
<para>Disconnect a client from this server. Useful to kick people out. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionId</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the client to disconnect</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the client was kicked</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="209" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1afee049be1db47ed163f57371f1d68184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Mirror.MultiplexTransport.ServerSend</definition>
        <argsstring>(List&lt; int &gt; connectionIds, int channelId, ArraySegment&lt; byte &gt; segment)</argsstring>
        <name>ServerSend</name>
        <reimplements refid="class_mirror_1_1_transport_1a9b7725d91b696845add4defdce3c37ab">ServerSend</reimplements>
        <param>
          <type>List&lt; int &gt;</type>
          <declname>connectionIds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channelId</declname>
        </param>
        <param>
          <type>ArraySegment&lt; byte &gt;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Send data to one or multiple clients. We provide a list, so that transports can make use of multicasting, and avoid allocations where possible. </para>
        </briefdescription>
        <detaileddescription>
<para>We don&apos;t provide a single ServerSend function to reduce complexity. Simply overwrite this one in your <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionIds</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of client connection ids to send the data to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc...</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the data was sent to all clients</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="216" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="216" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a8e851be71a40954c5dd4a5aa09ca4952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.ServerStart</definition>
        <argsstring>()</argsstring>
        <name>ServerStart</name>
        <reimplements refid="class_mirror_1_1_transport_1a104abe48a87936fbe5d31a289d83a36d">ServerStart</reimplements>
        <briefdescription>
<para>Start listening for clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="244" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a75515f8154aafc86bfc820b06d85c66c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.ServerStop</definition>
        <argsstring>()</argsstring>
        <name>ServerStop</name>
        <reimplements refid="class_mirror_1_1_transport_1a6e99933a82108c0dcb358ce4e60a3acb">ServerStop</reimplements>
        <briefdescription>
<para>Stop listening for clients and disconnect all existing clients </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="252" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="252" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a66fce608e954d97cd2ef1768512e58c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override int</type>
        <definition>override int Mirror.MultiplexTransport.GetMaxPacketSize</definition>
        <argsstring>(int channelId=0)</argsstring>
        <name>GetMaxPacketSize</name>
        <reimplements refid="class_mirror_1_1_transport_1a6340d7bcfced9674d8c4f59b0d0746cf">GetMaxPacketSize</reimplements>
        <param>
          <type>int</type>
          <declname>channelId</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. </para>
        </briefdescription>
        <detaileddescription>
<para>GetMaxPacketSize needs to return a value at all times. Even if the <ref refid="class_mirror_1_1_transport" kindref="compound">Transport</ref> isn&apos;t running, or isn&apos;t <ref refid="class_mirror_1_1_multiplex_transport_1ad98c9bce475c4f3f60ff76b73daca3ba" kindref="member">Available()</ref>. This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelId</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size in bytes that can be sent via the provided channel</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="261" column="29" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="261" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1afa69e1dd33ad5cfe47635ebbba868165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Mirror.MultiplexTransport.Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <reimplements refid="class_mirror_1_1_transport_1a79346ab9427f1cf37ff8154856040449">Shutdown</reimplements>
        <briefdescription>
<para>Shut down the transport, both as client and server </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="283" column="30" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="283" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a80a2c3f255a141acf14899f6239e71f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override string</type>
        <definition>override string Mirror.MultiplexTransport.ToString</definition>
        <argsstring>()</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="291" column="32" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="291" bodyend="299"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a21deb454b8380b547e61be7edfb40915" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.MultiplexTransport.OnEnable</definition>
        <argsstring>()</argsstring>
        <name>OnEnable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="29" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a1f1d42df887ff4f20066133608065edf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.MultiplexTransport.OnDisable</definition>
        <argsstring>()</argsstring>
        <name>OnDisable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="37" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a07f1aafa7e58bba2c2ab82a762937da6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.MultiplexTransport.InitClient</definition>
        <argsstring>()</argsstring>
        <name>InitClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="60" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a8b78864cb0c3f2dc1ba9f97d4a61e6fc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Mirror.MultiplexTransport.FromBaseId</definition>
        <argsstring>(int transportId, int connectionId)</argsstring>
        <name>FromBaseId</name>
        <param>
          <type>int</type>
          <declname>transportId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="131" column="13" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1ac0167694dc085afe32fe31ceccbd92d3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Mirror.MultiplexTransport.ToBaseId</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ToBaseId</name>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="136" column="13" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1a63cb6d0b9c82065c3b61299e9202fea5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Mirror.MultiplexTransport.ToTransportId</definition>
        <argsstring>(int connectionId)</argsstring>
        <name>ToTransportId</name>
        <param>
          <type>int</type>
          <declname>connectionId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="141" column="13" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_mirror_1_1_multiplex_transport_1afbf2619666009d26197f35b13427b628" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mirror.MultiplexTransport.InitServer</definition>
        <argsstring>()</argsstring>
        <name>InitServer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="146" column="14" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="146" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Mirror.MultiplexTransport</label>
        <link refid="class_mirror_1_1_multiplex_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>MonoBehaviour</label>
      </node>
      <node id="2">
        <label>Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Mirror.MultiplexTransport</label>
        <link refid="class_mirror_1_1_multiplex_transport"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>transports</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Mirror.UnityEventException</label>
        <link refid="class_mirror_1_1_unity_event_exception"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>UnityEvent&lt; Exception &gt;</label>
      </node>
      <node id="9">
        <label>Mirror.UnityEventIntException</label>
        <link refid="class_mirror_1_1_unity_event_int_exception"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>UnityEvent&lt; ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
      <node id="11">
        <label>Mirror.ClientDataReceivedEvent</label>
        <link refid="class_mirror_1_1_client_data_received_event"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Mirror.Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>OnServerConnected</edgelabel>
          <edgelabel>OnServerDisconnected</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>OnClientError</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>activeTransport</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>OnServerError</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>OnClientDataReceived</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>OnServerDataReceived</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Mirror.UnityEventInt</label>
        <link refid="class_mirror_1_1_unity_event_int"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>UnityEvent&lt; int, Exception &gt;</label>
      </node>
      <node id="3">
        <label>MonoBehaviour</label>
      </node>
      <node id="2">
        <label>Transport</label>
        <link refid="class_mirror_1_1_transport"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>OnServerConnected</edgelabel>
          <edgelabel>OnServerDisconnected</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>OnClientError</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>activeTransport</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>OnServerError</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>OnClientDataReceived</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>OnServerDataReceived</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>Mirror.ServerDataReceivedEvent</label>
        <link refid="class_mirror_1_1_server_data_received_event"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>UnityEvent&lt; int &gt;</label>
      </node>
      <node id="14">
        <label>UnityEvent&lt; int, ArraySegment&lt; byte &gt;, int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" line="9" column="11" bodyfile="C:/Users/aaron/Documents/GitHub/MyFPS/Assets/Mirror/Runtime/Transport/MultiplexTransport.cs" bodystart="10" bodyend="300"/>
    <listofallmembers>
      <member refid="class_mirror_1_1_transport_1a4e187471cf106ef6068e4347b1d2fdee" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>activeTransport</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a4db52db4e3ec6c093bc34973c1b6f116" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>available</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1ad98c9bce475c4f3f60ff76b73daca3ba" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>Available</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1ad87fa522dbffc912366292c9c5acef44" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>Awake</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a2f4b96f51f862f798efc0b0f00e6125e" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a80db4247bdcaec3058eba6307188040a" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ClientConnect</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a641c5ae1ac013c3f4cd7bdd6590e8fa8" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ClientConnected</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a9ed0db19440dcb216448bd4ef7750c7a" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ClientDisconnect</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1aeddfb34290f9679f0a7e0002166d5b4d" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ClientSend</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a8b78864cb0c3f2dc1ba9f97d4a61e6fc" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>FromBaseId</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a66fce608e954d97cd2ef1768512e58c3" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>GetMaxPacketSize</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a07f1aafa7e58bba2c2ab82a762937da6" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>InitClient</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1afbf2619666009d26197f35b13427b628" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>InitServer</name></member>
      <member refid="class_mirror_1_1_transport_1a60da8b19a9fcc0e4e5b732887ed750dd" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>OnApplicationQuit</name></member>
      <member refid="class_mirror_1_1_transport_1acafeb3fc7051eb2456961a4aab66bd67" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnClientConnected</name></member>
      <member refid="class_mirror_1_1_transport_1a73f5e6da15756d7bf2bcfd12429be058" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnClientDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a32abf6e68728cdb49cd31a9208a7eb55" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnClientDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a288982823f99bfd439277ee2a174173b" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnClientError</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a1f1d42df887ff4f20066133608065edf" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnDisable</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a21deb454b8380b547e61be7edfb40915" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnEnable</name></member>
      <member refid="class_mirror_1_1_transport_1a4e8ff19ebeb434fec9b7262fa1b9638c" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnServerConnected</name></member>
      <member refid="class_mirror_1_1_transport_1ac5d03436d77ffe03d3391629a1a85c16" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnServerDataReceived</name></member>
      <member refid="class_mirror_1_1_transport_1a14b8d3ba13b5f98924aeec45af184d45" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnServerDisconnected</name></member>
      <member refid="class_mirror_1_1_transport_1a656d1f29dc7a753a6c63e6c9cfdc73cc" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>OnServerError</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a516eea23f28e69c354300ede6cfb0d4b" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>recipientsCache</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a318b01792419938222063f19efc21121" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerActive</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a98430e169e0950e985460ee0fc8d26e0" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerDisconnect</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1afdf2563f5add8134a4c0b6c8cad9b88b" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerGetClientAddress</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1afee049be1db47ed163f57371f1d68184" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerSend</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a8e851be71a40954c5dd4a5aa09ca4952" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerStart</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a75515f8154aafc86bfc820b06d85c66c" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerStop</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1ab0a39ef76d62f2191e7de6e5f794617b" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>ServerUri</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1afa69e1dd33ad5cfe47635ebbba868165" prot="public" virt="virtual"><scope>Mirror::MultiplexTransport</scope><name>Shutdown</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1ac0167694dc085afe32fe31ceccbd92d3" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>ToBaseId</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a80a2c3f255a141acf14899f6239e71f7" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>ToString</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1a63cb6d0b9c82065c3b61299e9202fea5" prot="private" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>ToTransportId</name></member>
      <member refid="class_mirror_1_1_multiplex_transport_1ac2452223ad0c41590c23763d1802ced4" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>transports</name></member>
      <member refid="class_mirror_1_1_transport_1ad1a6da8f541579f53d7a2c61cbc820c6" prot="public" virt="non-virtual"><scope>Mirror::MultiplexTransport</scope><name>Update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
